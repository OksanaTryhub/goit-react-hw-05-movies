{"version":3,"file":"static/js/452.e8e97952.chunk.js","mappings":"uLACA,MAAyB,uB,SCQzB,EAPe,kBACb,iBAAKA,UAAWC,EAAhB,WACE,qBACA,sBAHW,C,wJCDf,GAAgB,aAAe,+BAA+B,UAAY,4BAA4B,eAAiB,iCAAiC,eAAiB,iCAAiC,WAAa,8B,SCSjNC,EAAO,SAAC,GAAa,EAAXC,KAAY,IAC1B,GAAgCC,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,oGAEnBJ,GAAW,GAFQ,UAGAK,EAAAA,EAAAA,IAAgBJ,GAHhB,OAGbK,EAHa,OAInBR,EAAYQ,EAAKX,MAJE,gDAMnBY,QAAQC,IAAR,MANmB,yBAQnBR,GAAW,GARQ,4EAAH,qDAWpBI,GACD,GAAE,CAACH,IAEJ,IAAMQ,EAAWZ,EAASa,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OAC5B,gBAAatB,UAAWC,EAAAA,UAAxB,UACGoB,GACC,gBACErB,UAAWC,EAAAA,eACXsB,IAAG,UAAKC,EAAAA,GAAL,gBAAqBH,GACxBI,IAAKL,EACLM,MAAM,MACNC,OAAO,SAGT,gBACE3B,UAAWC,EAAAA,eACXsB,IAAKK,EACLH,IAAKL,EACLM,MAAM,MACNC,OAAO,SAIX,eAAI3B,UAAWC,EAAAA,eAAf,SAAuCmB,KACvC,eAAIpB,UAAWC,EAAAA,kBAAf,SAA0CqB,MApBnCH,EADmB,IAyB9B,OACE,gBAAKnB,UAAWC,EAAAA,aAAhB,SACGM,GACC,SAACsB,EAAA,QAAD,IACExB,EAASyB,QACX,iCACE,eAAI9B,UAAWC,EAAAA,WAAf,mBACA,eAAID,UAAWC,EAAAA,aAAf,SAAqCgB,QAGvC,eAAIjB,UAAWC,EAAAA,WAAf,qDAMP,EAED,IAEAC,EAAK6B,aAAe,CAClB5B,KAAM,G,8MC3EF6B,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAIDb,EAAW,8BAEXc,EAAiB,mCAAG,WAAMC,GAAN,kFACzBC,EADyB,oCACYD,GADZ,SAERP,EAASS,IAAID,GAFL,uBAEvB1B,EAFuB,EAEvBA,KAFuB,kBAGxBA,GAHwB,2CAAH,sDAYjB4B,EAAe,mCAAG,WAAMjC,GAAN,kFACvB+B,EADuB,iBACL/B,GADK,SAENuB,EAASS,IAAID,GAFP,uBAErB1B,EAFqB,EAErBA,KAFqB,kBAGtBA,GAHsB,2CAAH,sDAMfD,EAAe,mCAAG,WAAMJ,GAAN,kFACvB+B,EADuB,iBACL/B,EADK,qBAENuB,EAASS,IAAID,GAFP,uBAErB1B,EAFqB,EAErBA,KAFqB,kBAGtBA,GAHsB,2CAAH,sDAMf6B,EAAe,mCAAG,WAAMlC,GAAN,kFACvB+B,EADuB,iBACL/B,EADK,qBAENuB,EAASS,IAAID,GAFP,uBAErB1B,EAFqB,EAErBA,KAFqB,kBAGtBA,GAHsB,2CAAH,sDAMf8B,EAAiB,mCAAG,WAAOC,EAAaN,GAApB,kFACzBC,EADyB,6BACKK,EADL,iBACyBN,GADzB,SAERP,EAASS,IAAID,GAFL,uBAEvB1B,EAFuB,EAEvBA,KAFuB,kBAGxBA,GAHwB,2CAAH,uD","sources":["webpack://goit-react-hw-05-movies/./src/components/Loader/Loader.module.scss?a435","components/Loader/Loader.jsx","webpack://goit-react-hw-05-movies/./src/pages/CastPage/CastPage.module.scss?0463","pages/CastPage/CastPage.jsx","shared/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loader\":\"Loader_loader__DwtSp\",\"animate\":\"Loader_animate__eugiA\"};","import styles from './Loader.module.scss';\n\nconst Loader = () => (\n  <div className={styles.loader}>\n    <span></span>\n    <span></span>\n  </div>\n);\n\nexport default Loader;\n","// extracted by mini-css-extract-plugin\nexport default {\"cast_gallery\":\"CastPage_cast_gallery__bWVms\",\"cast_card\":\"CastPage_cast_card__1np1-\",\"cast_cardImage\":\"CastPage_cast_cardImage__TUUnf\",\"cast_cardTitle\":\"CastPage_cast_cardTitle__h0B+h\",\"cast_title\":\"CastPage_cast_title__Rr3OZ\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { getMovieCredits, imageUrl } from 'shared/api';\nimport Loader from 'components/Loader/Loader';\nimport actorPhoto from 'components/images/actorPhotoPlaceholder.jpg';\n\nimport styles from './CastPage.module.scss';\n\nconst Cast = ({ cast }) => {\n  const [castData, setCastData] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchMovieCast = async () => {\n      try {\n        setLoading(true);\n        const data = await getMovieCredits(movieId);\n        setCastData(data.cast);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovieCast();\n  }, [movieId]);\n\n  const elements = castData.map(({ id, name, profile_path, character }) => (\n    <li key={id} className={styles.cast_card}>\n      {profile_path ? (\n        <img\n          className={styles.cast_cardImage}\n          src={`${imageUrl}w185/${profile_path}`}\n          alt={name}\n          width=\"185\"\n          height=\"278\"\n        />\n      ) : (\n        <img\n          className={styles.cast_cardImage}\n          src={actorPhoto}\n          alt={name}\n          width=\"185\"\n          height=\"278\"\n        />\n      )}\n\n      <h3 className={styles.cast_cardTitle}>{name}</h3>\n      <h4 className={styles.cast_cardSubtitle}>{character}</h4>\n    </li>\n  ));\n\n  return (\n    <div className={styles.cast_wrapper}>\n      {loading ? (\n        <Loader />\n      ) : castData.length ? (\n        <>\n          <h2 className={styles.cast_title}>Cast</h2>\n          <ul className={styles.cast_gallery}>{elements}</ul>\n        </>\n      ) : (\n        <h2 className={styles.cast_title}>\n          There is no information about the cast\n        </h2>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n\nCast.defaultProps = {\n  cast: [],\n};\n\nCast.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string,\n      profile_path: PropTypes.string,\n      character: PropTypes.string,\n    })\n  ),\n};\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'a034e16426b596aeae20a6d68cbc45ef',\n    language: 'en-US',\n  },\n});\n\nexport const imageUrl = 'https://image.tmdb.org/t/p/';\n\nexport const getTrendingMovies = async page => {\n  const query = `/trending/movie/week?page=${page}`;\n  const { data } = await instance.get(query);\n  return data;\n};\n\nexport const getPopularMovies = async () => {\n  const query = '/movie/popular';\n  const { data } = await instance.get(query);\n  return data.results;\n};\n\nexport const getMovieDetails = async movieId => {\n  const query = `/movie/${movieId}`;\n  const { data } = await instance.get(query);\n  return data;\n};\n\nexport const getMovieCredits = async movieId => {\n  const query = `/movie/${movieId}/credits`;\n  const { data } = await instance.get(query);\n  return data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const query = `/movie/${movieId}/reviews`;\n  const { data } = await instance.get(query);\n  return data;\n};\n\nexport const getMovieByKeyword = async (searchQuery, page) => {\n  const query = `search/movie?query=${searchQuery}&page=${page}`;\n  const { data } = await instance.get(query);\n  return data;\n};\n"],"names":["className","styles","Cast","cast","useState","castData","setCastData","loading","setLoading","movieId","useParams","useEffect","fetchMovieCast","getMovieCredits","data","console","log","elements","map","id","name","profile_path","character","src","imageUrl","alt","width","height","actorPhoto","Loader","length","defaultProps","instance","axios","baseURL","params","api_key","language","getTrendingMovies","page","query","get","getMovieDetails","getMovieReviews","getMovieByKeyword","searchQuery"],"sourceRoot":""}